# Generated by Django 5.1.5 on 2025-01-31 23:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='rides_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='rides_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'rides_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_type', models.CharField(help_text='Type of vehicle', max_length=100)),
                ('license_plate', models.CharField(help_text='Vehicle license plate number', max_length=25, unique=True)),
                ('max_passengers', models.PositiveIntegerField(help_text='Maximum number of passengers the vehicle can accommodate')),
                ('special_info', models.TextField(blank=True, help_text='Any special vehicle information')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('driver', models.OneToOneField(help_text='User who drives this vehicle', on_delete=django.db.models.deletion.CASCADE, related_name='vehicle', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destination', models.CharField(help_text='Destination address for the ride', max_length=255)),
                ('arrival_time', models.DateTimeField(help_text='Required arrival date and time')),
                ('owner_party_size', models.PositiveIntegerField(help_text="Number of passengers in owner's party")),
                ('vehicle_type', models.CharField(blank=True, help_text='Preferred vehicle type (optional)', max_length=50)),
                ('special_requests', models.TextField(blank=True, help_text='Any special requests for the ride')),
                ('shareable', models.BooleanField(default=False, help_text='Whether this ride can be joined by other users')),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('CONFIRMED', 'Confirmed'), ('COMPLETE', 'Complete')], default='OPEN', help_text='Current status of the ride', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(help_text='User who requested this ride', on_delete=django.db.models.deletion.CASCADE, related_name='owned_rides', to=settings.AUTH_USER_MODEL)),
                ('driver', models.ForeignKey(blank=True, help_text='Driver assigned to this ride', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='driven_rides', to='rides.vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='RideSharer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('party_size', models.PositiveIntegerField(help_text="Number of passengers in sharer's party")),
                ('earliest_arrival', models.DateTimeField(help_text='Earliest acceptable arrival time')),
                ('latest_arrival', models.DateTimeField(help_text='Latest acceptable arrival time')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ride', models.ForeignKey(help_text='Ride being shared', on_delete=django.db.models.deletion.CASCADE, related_name='sharers', to='rides.ride')),
                ('user', models.ForeignKey(help_text='User sharing the ride', on_delete=django.db.models.deletion.CASCADE, related_name='shared_rides', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['earliest_arrival', 'latest_arrival'], name='rides_rides_earlies_1be475_idx')],
                'unique_together': {('ride', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='ride',
            index=models.Index(fields=['status', 'arrival_time'], name='rides_ride_status_a0c0d2_idx'),
        ),
        migrations.AddIndex(
            model_name='ride',
            index=models.Index(fields=['owner', 'status'], name='rides_ride_owner_i_8360fe_idx'),
        ),
        migrations.AddIndex(
            model_name='ride',
            index=models.Index(fields=['destination'], name='rides_ride_destina_12f119_idx'),
        ),
    ]
